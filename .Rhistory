# save the ratio of p(A|mp(v)\A,v)|_{a0}/p(A|mp(v)\A,v)|_{a1}
# such that we can come back to update the density ratio of v once we update the densratioA
assign(paste0("bayes.densratio_",v), {p.a0.mpv/p.a1.mpv})
L.use.densratioA <- c(L.use.densratioA, v)
}else{
bayes_fit_v <- CV.SuperLearner(Y=A, X=dat_bayes.v_v, family = binomial(), V = K, SL.library = lib.L, control = list(saveFitLibrary=T),saveAll = T)
bayes_fit_v <- .force_weight(bayes_fit_v, model="cv", lib=lib.L) # force weight to be 1 for the one algorithm
# p(A=1|mp(v)\A)
p.A1.mpv_v <- bayes_fit_v$SL.predict
#p(v=a0|mp(v)\A)
p.a0.mpv_v <- a0*p.A1.mpv_v+(1-a0)*(1-p.A1.mpv_v)
#p(v=a0|mp(v)\A)
p.a1.mpv_v <- 1-p.a0.mpv_v
p.a1.mpv_v[p.a1.mpv_v<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
p.a0.mpv_v[p.a0.mpv_v<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
# save the density ratio: p(v|mp(V))|_{a0}/p(v|mp(V))|_{a1}
assign(paste0("densratio_",v), {p.a0.mpv/p.a1.mpv}/{p.a0.mpv_v/p.a1.mpv_v})
}
}else if (superlearner.L==T){
bayes_fit <- SuperLearner(Y=A, X=dat_bayes.v, family = binomial(), SL.library = lib.L)
bayes_fit <- .force_weight(bayes_fit, model="sl", lib=lib.L) # force weight to be 1 for the one algorithm
# p(A=1|mp(v)\A,v)
p.A1.mpv <- predict(bayes_fit, type = "response")[[1]] %>% as.vector()  # p(A=1|X)
#p(v=a0|mp(v)\A,v)
p.a0.mpv <- a0*p.A1.mpv+(1-a0)*(1-p.A1.mpv)
#p(v=a0|mp(v)\A,v)
p.a1.mpv <- 1-p.a0.mpv
p.a1.mpv[p.a1.mpv<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
p.a0.mpv[p.a0.mpv<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
if (are_same(setdiff(replace.vector(f.markov_pillow(graph, v, treatment), multivariate.variables) ,treatment), replace.vector(f.markov_pillow(graph,treatment, treatment), multivariate.variables))){
# save the density ratio: p(v|mp(V))|_{a0}/p(v|mp(V))|_{a1}
assign(paste0("densratio_",v), {p.a0.mpv/p.a1.mpv}/densratio_A)
# save the ratio of p(A|mp(v)\A,v)|_{a0}/p(A|mp(v)\A,v)|_{a1}
# such that we can come back to update the density ratio of v once we update the densratioA
assign(paste0("bayes.densratio_",v), {p.a0.mpv/p.a1.mpv})
L.use.densratioA <- c(L.use.densratioA, v)
}else{
bayes_fit_v <- SuperLearner(Y=A, X=dat_bayes.v_v, family = binomial(), SL.library = lib.L)
bayes_fit_v <- .force_weight(bayes_fit_v, model="sl", lib=lib.L) # force weight to be 1 for the one algorithm
# p(A=1|mp(v)\A)
p.A1.mpv_v <- predict(bayes_fit_v, type = "response")[[1]] %>% as.vector()  # p(A=1|X)
#p(v=a0|mp(v)\A)
p.a0.mpv_v <- a0*p.A1.mpv_v+(1-a0)*(1-p.A1.mpv_v)
#p(v=a0|mp(v)\A)
p.a1.mpv_v <- 1-p.a0.mpv_v
p.a1.mpv_v[p.a1.mpv_v<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
p.a0.mpv_v[p.a0.mpv_v<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
# save the density ratio: p(v|mp(V))|_{a0}/p(v|mp(V))|_{a1}
assign(paste0("densratio_",v), {p.a0.mpv/p.a1.mpv}/{p.a0.mpv_v/p.a1.mpv_v})
}
} else { # Linear model
# estimate density ratio using bayes rule
bayes_fit <- glm(A ~ ., data=dat_bayes.v, family = binomial())
# p(A=1|mp(v)\A,v)
p.A1.mpv <- predict(bayes_fit, type = "response")
#p(v=a0|mp(v)\A,v)
p.a0.mpv <- a0*p.A1.mpv+(1-a0)*(1-p.A1.mpv)
#p(v=a0|mp(v)\A,v)
p.a1.mpv <- 1-p.a0.mpv
p.a1.mpv[p.a1.mpv<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
p.a0.mpv[p.a0.mpv<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
# save the density ratio: p(v|mp(V))|_{a0}/p(v|mp(V))|_{a1}
assign(paste0("densratio_",v), {p.a0.mpv/p.a1.mpv}/densratio_A)
# save the ratio of p(A|mp(v)\A,v)|_{a0}/p(A|mp(v)\A,v)|_{a1}
# such that we can come back to update the density ratio of v once we update the densratioA
assign(paste0("bayes.densratio_",v), {p.a0.mpv/p.a1.mpv})
if (are_same(setdiff(replace.vector(f.markov_pillow(graph, v, treatment), multivariate.variables) ,treatment), replace.vector(f.markov_pillow(graph,treatment, treatment), multivariate.variables))){
# save the density ratio: p(v|mp(V))|_{a0}/p(v|mp(V))|_{a1}
assign(paste0("densratio_",v), {p.a0.mpv/p.a1.mpv}/densratio_A)
# save the ratio of p(A|mp(v)\A,v)|_{a0}/p(A|mp(v)\A,v)|_{a1}
# such that we can come back to update the density ratio of v once we update the densratioA
assign(paste0("bayes.densratio_",v), {p.a0.mpv/p.a1.mpv})
L.use.densratioA <- c(L.use.densratioA, v)
}else{
bayes_fit_v <- glm(A ~ ., data=dat_bayes.v_v, family = binomial())
# p(A=1|mp(v)\A)
p.A1.mpv_v <- predict(bayes_fit_v, type = "response")
#p(v=a0|mp(v)\A)
p.a0.mpv_v <- a0*p.A1.mpv_v+(1-a0)*(1-p.A1.mpv_v)
#p(v=a0|mp(v)\A)
p.a1.mpv_v <- 1-p.a0.mpv_v
p.a1.mpv_v[p.a1.mpv_v<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
p.a0.mpv_v[p.a0.mpv_v<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
# save the density ratio: p(v|mp(V))|_{a0}/p(v|mp(V))|_{a1}
assign(paste0("densratio_",v), {p.a0.mpv/p.a1.mpv}/{p.a0.mpv_v/p.a1.mpv_v})
}
}
} ## Iterate over each variable in L\A
} else {
print("Invalid ratio.method.L input.")
}
# Get all the densratio vectors based on their names
densratio.vectors.L <- mget(c(paste0("densratio_",L.removedA),"densratio_A"))
# Create a data frame using all the vectors
densratio.L <- data.frame(densratio.vectors.L)
M.mpM.includeA <- c()
M.mpM.excludeA <- c()
for (v in M){ ## Iterate over each variable in M
if (treatment %in% f.markov_pillow(graph, v, treatment)){ # vertices whose Markov pillow include A
M.mpM.includeA <- c(M.mpM.includeA, v)
} else { # vertices whose Markov pillow don't include A
M.mpM.excludeA <- c(M.mpM.excludeA, v)
}
} ## Iterate over each variable in M
# assign ratio=1 for vertices in M.mpM.excludeA
for (m in M.mpM.excludeA) { assign(paste0("densratio_", m), 1) }
if (ratio.method.M=="densratio"){ ################### METHOD 2A: densratio method  ###################
# Error: densratio method doesn't support factor variables
if (!all(sapply(replace.vector(unique(c(M.mpM.includeA, unlist(lapply(1:length(M.mpM.includeA), function(i) f.markov_pillow(graph, M.mpM.includeA[i], treatment))))), multivariate.variables), function(var) is.numeric(data[,var]) | is.integer(data[,var])))){
print("Error in estimating density ratios associated with variables in M: densratio method only support numeric/integer variables, try bayes method instead.")
stop() }
M.use.densratioA <- c()
# if M and mpi(M) only consists numeric/integer variables: apply density ratio estimation
for (v in M.mpM.includeA){
# used for estimating numerator of the density ratio
dat_v.num.a0 <- data[data[[treatment]] == a0, replace.vector(c(v, f.markov_pillow(graph, v, treatment)), multivariate.variables)] # select rows where A=a0
dat_v.num.a1 <- data[data[[treatment]] == a1, replace.vector(c(v, f.markov_pillow(graph, v, treatment)), multivariate.variables)] # select rows where A=a1
densratio.v.num <- densratio(dat_v.num.a0, dat_v.num.a1)
ratio.num <- densratio.v.num$compute_density_ratio(data[, replace.vector(c(v, f.markov_pillow(graph, v, treatment)), multivariate.variables)])
## Estimator the denomator via bayes rule to avoid zero division
# used for estimating the denominator of the density ratio
dat_bayes.v <- data[, setdiff(replace.vector(f.markov_pillow(graph, v, treatment), multivariate.variables), treatment), drop=F]
names(dat_bayes.v)[names(dat_bayes.v)=="Y"] <- "outcome" # Super Learner get confused of the regressor contains a variable named Y. Thus rename it to outcome
if (are_same(setdiff(replace.vector(f.markov_pillow(graph, v, treatment), multivariate.variables) ,treatment), replace.vector(f.markov_pillow(graph,treatment, treatment), multivariate.variables))){
ratio.den <- densratio_A
assign(paste0("densratio.densratio_",v), ratio.num)
M.use.densratioA <- c(M.use.densratioA, v)
}else{
if (crossfit==T){
bayes_fit <- CV.SuperLearner(Y=A, X=dat_bayes.v, family = binomial(), V = K, SL.library = lib.M, control = list(saveFitLibrary=T),saveAll = T)
bayes_fit <- .force_weight(bayes_fit, model="cv", lib=lib.M) # force weight to be 1 for the one algorithm
# p(A=1|mp(v)\A,v)
p.A1.mpv <- bayes_fit$SL.predict
#p(v=a0|mp(v)\A,v)
p.a0.mpv <- a0*p.A1.mpv+(1-a0)*(1-p.A1.mpv)
#p(v=a0|mp(v)\A,v)
p.a1.mpv <- 1-p.a0.mpv
p.a1.mpv[p.a1.mpv<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
p.a0.mpv[p.a0.mpv<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
# save the density ratio: p(a0|mp(V))/p(a1|mp(V))
ratio.den <- p.a0.mpv/p.a1.mpv
}else if (superlearner.M==T){
bayes_fit <- SuperLearner(Y=A, X=dat_bayes.v, family = binomial(), SL.library = lib.M)
bayes_fit <- .force_weight(bayes_fit, model="sl", lib=lib.M) # force weight to be 1 for the one algorithm
# p(A=1|mp(v)\A,v)
p.A1.mpv <- predict(bayes_fit, type = "response")[[1]] %>% as.vector()  # p(A=1|X)
#p(v=a0|mp(v)\A,v)
p.a0.mpv <- a0*p.A1.mpv+(1-a0)*(1-p.A1.mpv)
#p(v=a0|mp(v)\A,v)
p.a1.mpv <- 1-p.a0.mpv
p.a1.mpv[p.a1.mpv<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
p.a0.mpv[p.a0.mpv<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
# save the density ratio: p(a0|mp(V))/p(a1|mp(V))
ratio.den <- p.a0.mpv/p.a1.mpv
} else {
# estimate density ratio using bayes rule
bayes_fit <- glm(A ~ ., data=dat_bayes.v, family = binomial())
# p(A=1|mp(v)\A,v)
p.A1.mpv <- predict(bayes_fit, type = "response")
#p(v=a0|mp(v)\A,v)
p.a0.mpv <- a0*p.A1.mpv+(1-a0)*(1-p.A1.mpv)
#p(v=a0|mp(v)\A,v)
p.a1.mpv <- 1-p.a0.mpv
p.a1.mpv[p.a1.mpv<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
p.a0.mpv[p.a0.mpv<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
# save the density ratio: p(a0|mp(V))/p(a1|mp(V))
ratio.den <- p.a0.mpv/p.a1.mpv
}
}
ratio <- ratio.num/ratio.den # p(M|mp(M))|_{a_0}/p(M|mp(M))|_{a_1}
assign(paste0("densratio_",v), ratio)
}
} else if (ratio.method.M=="dnorm"){ ################### METHOD 2B: dnorm method  ###################
if (!all(sapply(replace.vector(M.mpM.includeA, multivariate.variables), function(var) is.numeric(data[,var]) | is.integer(data[,var]) | length(unique(data[,var]))==2 ))){
print("Error in estimating density ratios associated with variables in M: dnorm method only support continuous or binary variables, try bayes method instead.")
stop() }
# if M consists of continuous or binary variables: apply density ratio estimation via dnorm
for (v in M.mpM.includeA){ ## Iterate over each variable in L\A
ratio <- calculate_density_ratio_dnorm(a0=a0, v , graph, treatment=treatment, data=data, formula=dnorm.formula.M) # p(M|mp(M))|_{a_0}/p(M|mp(M))|_{a_1}
assign(paste0("densratio_",v), ratio)
}
}else if (ratio.method.M=="bayes"){ ################### METHOD 2C: Bayes method ###################
M.use.densratioA <- c()
for (v in M.mpM.includeA){ ## Iterate over each variable in M
#### Prepare data for regression and prediction ####
dat_bayes.v <- data[,setdiff(replace.vector(c(v, f.markov_pillow(graph, v, treatment)), multivariate.variables) ,treatment), drop=F] # contains variable v + Markov pillow of v - treatment
names(dat_bayes.v)[names(dat_bayes.v)=="Y"] <- "outcome" # Super Learner get confused of the regressor contains a variable named Y. Thus rename it to outcome
dat_bayes.v_v <- data[,setdiff(replace.vector(f.markov_pillow(graph, v, treatment), multivariate.variables) ,treatment), drop=F] # contains variable Markov pillow of v - treatment
#### Fit nuisance models ####
if (crossfit==T){
# fit p(A|mp(v)\A,v)
bayes_fit <- CV.SuperLearner(Y=A, X=dat_bayes.v, family = binomial(), V = K, SL.library = lib.M, control = list(saveFitLibrary=T),saveAll = T)
bayes_fit <- .force_weight(bayes_fit, model="cv", lib=lib.M) # force weight to be 1 for the one algorithm
# p(A=1|mp(v)\A,v)
p.A1.mpv <- bayes_fit$SL.predict
#p(A=a0|mp(v)\A,v)
p.a0.mpv <- a0*p.A1.mpv+(1-a0)*(1-p.A1.mpv)
#p(A=a1|mp(v)\A,v)
p.a1.mpv <- 1-p.a0.mpv
p.a1.mpv[p.a1.mpv<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
p.a0.mpv[p.a0.mpv<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
if (are_same(setdiff(replace.vector(f.markov_pillow(graph, v, treatment), multivariate.variables) ,treatment), replace.vector(f.markov_pillow(graph,treatment, treatment), multivariate.variables))){
# save the density ratio: p(v|mp(V))|_{a0}/p(v|mp(V))|_{a1}
assign(paste0("densratio_",v), {p.a0.mpv/p.a1.mpv}/densratio_A)
# save the ratio of p(A|mp(v)\A,v)|_{a0}/p(A|mp(v)\A,v)|_{a1}
# such that we can come back to update the density ratio of v once we update the densratioA
assign(paste0("bayes.densratio_",v), {p.a0.mpv/p.a1.mpv})
M.use.densratioA <- c(M.use.densratioA, v)
}else{
bayes_fit_v <- CV.SuperLearner(Y=A, X=dat_bayes.v_v, family = binomial(), V = K, SL.library = lib.M, control = list(saveFitLibrary=T),saveAll = T)
bayes_fit_v <- .force_weight(bayes_fit_v, model="cv", lib=lib.M) # force weight to be 1 for the one algorithm
# p(A=1|mp(v)\A)
p.A1.mpv_v <- bayes_fit_v$SL.predict  # p(A=1|X)
#p(v=a0|mp(v)\A)
p.a0.mpv_v <- a0*p.A1.mpv_v+(1-a0)*(1-p.A1.mpv_v)
#p(v=a0|mp(v)\A)
p.a1.mpv_v <- 1-p.a0.mpv_v
p.a1.mpv_v[p.a1.mpv_v<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
p.a0.mpv_v[p.a0.mpv_v<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
# save the density ratio: p(v|mp(V))|_{a0}/p(v|mp(V))|_{a1}
assign(paste0("densratio_",v), {p.a0.mpv/p.a1.mpv}/{p.a0.mpv_v/p.a1.mpv_v})
}
}else if (superlearner.M==T){
# fit p(A|mp(v)\A,v)
bayes_fit <- SuperLearner(Y=A, X=dat_bayes.v, family = binomial(), SL.library = lib.M)
bayes_fit <- .force_weight(bayes_fit, model="sl", lib=lib.M) # force weight to be 1 for the one algorithm
# p(A=1|mp(v)\A,v)
p.A1.mpv <- predict(bayes_fit, type = "response")[[1]] %>% as.vector()  # p(A=1|X)
#p(A=a0|mp(v)\A,v)
p.a0.mpv <- a0*p.A1.mpv+(1-a0)*(1-p.A1.mpv)
#p(A=a1|mp(v)\A,v)
p.a1.mpv <- 1-p.a0.mpv
p.a1.mpv[p.a1.mpv<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
p.a0.mpv[p.a0.mpv<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
if (are_same(setdiff(replace.vector(f.markov_pillow(graph, v, treatment), multivariate.variables) ,treatment), replace.vector(f.markov_pillow(graph,treatment, treatment), multivariate.variables))){
# save the density ratio: p(v|mp(V))|_{a0}/p(v|mp(V))|_{a1}
assign(paste0("densratio_",v), {p.a0.mpv/p.a1.mpv}/densratio_A)
# save the ratio of p(A|mp(v)\A,v)|_{a0}/p(A|mp(v)\A,v)|_{a1}
# such that we can come back to update the density ratio of v once we update the densratioA
assign(paste0("bayes.densratio_",v), {p.a0.mpv/p.a1.mpv})
M.use.densratioA <- c(M.use.densratioA, v)
}else{
bayes_fit_v <- SuperLearner(Y=A, X=dat_bayes.v_v, family = binomial(), SL.library = lib.M)
bayes_fit_v <- .force_weight(bayes_fit_v, model="sl", lib=lib.M) # force weight to be 1 for the one algorithm
# p(A=1|mp(v)\A)
p.A1.mpv_v <- predict(bayes_fit_v, type = "response")[[1]] %>% as.vector()  # p(A=1|X)
#p(v=a0|mp(v)\A)
p.a0.mpv_v <- a0*p.A1.mpv_v+(1-a0)*(1-p.A1.mpv_v)
#p(v=a0|mp(v)\A)
p.a1.mpv_v <- 1-p.a0.mpv_v
p.a1.mpv_v[p.a1.mpv_v<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
p.a0.mpv_v[p.a0.mpv_v<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
# save the density ratio: p(v|mp(V))|_{a0}/p(v|mp(V))|_{a1}
assign(paste0("densratio_",v), {p.a0.mpv/p.a1.mpv}/{p.a0.mpv_v/p.a1.mpv_v})
}
} else {
# estimate density ratio using bayes rule
bayes_fit <- glm(A ~ ., data=dat_bayes.v, family = binomial())
# p(A=1|mp(v)\A,v)
p.A1.mpv <- predict(bayes_fit, type = "response")
#p(v=a0|mp(v)\A,v)
p.a0.mpv <- a0*p.A1.mpv+(1-a0)*(1-p.A1.mpv)
#p(v=a0|mp(v)\A,v)
p.a1.mpv <- 1-p.a0.mpv
p.a1.mpv[p.a1.mpv<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
p.a0.mpv[p.a0.mpv<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
if (are_same(setdiff(replace.vector(f.markov_pillow(graph, v, treatment), multivariate.variables) ,treatment), replace.vector(f.markov_pillow(graph,treatment, treatment), multivariate.variables))){
# save the density ratio: p(v|mp(V))|_{a0}/p(v|mp(V))|_{a1}
assign(paste0("densratio_",v), {p.a0.mpv/p.a1.mpv}/densratio_A)
# save the ratio of p(A|mp(v)\A,v)|_{a0}/p(A|mp(v)\A,v)|_{a1}
# such that we can come back to update the density ratio of v once we update the densratioA
assign(paste0("bayes.densratio_",v), {p.a0.mpv/p.a1.mpv})
M.use.densratioA <- c(M.use.densratioA, v)
}else{
bayes_fit_v <- glm(A ~ ., data=dat_bayes.v_v, family = binomial())
# p(A=1|mp(v)\A)
p.A1.mpv_v <- predict(bayes_fit_v, type = "response")
#p(v=a0|mp(v)\A)
p.a0.mpv_v <- a0*p.A1.mpv_v+(1-a0)*(1-p.A1.mpv_v)
#p(v=a0|mp(v)\A)
p.a1.mpv_v <- 1-p.a0.mpv_v
p.a1.mpv_v[p.a1.mpv_v<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
p.a0.mpv_v[p.a0.mpv_v<zerodiv.avoid] <- zerodiv.avoid # added to avoid INF
# save the density ratio: p(v|mp(V))|_{a0}/p(v|mp(V))|_{a1}
assign(paste0("densratio_",v), {p.a0.mpv/p.a1.mpv}/{p.a0.mpv_v/p.a1.mpv_v})
}
}
} ## Iterate over each variable in M
} else {
print("Invalid ratio.method.M input.")
stop()
}
# Get the densratio vectors based on their names
densratio.vectors.M <- mget(paste0("densratio_",M))
# Create a data frame using all the vectors
densratio.M <- data.frame(densratio.vectors.M)
# the sequential regression will be perform for v that locates between A and Y accroding to topological order tau
vertices.between.AY <- tau[{which(tau==treatment)+1}:{which(tau==outcome)-1}]
# sequential regression
for (v in rev(vertices.between.AY)){ ## iterate through vertices between A and Y according to topological order tau
# perform sequential regressions for v with larger order first: rev()
### Prepare Markov pillow and dataset for regression and prediction ####
# Find Markov pillow of v
mpv <- f.markov_pillow(graph, v, treatment) # Markov pillow for outcome
mpv <- replace.vector(mpv, multivariate.variables) # replace vertices with it's components if vertices are multivariate
# prepare dataset for regression and prediction
dat_mpv <- data[,mpv] # extract data for Markov pillow for v
if (treatment %in% mpv){ # we only need to consider evaluate regression at specific level of A if treatment is in Markov pillow for v
# set treatment to a0
dat_mpv.a0 <- dat_mpv %>% mutate(!!treatment := a0)
# set treatment to a1
dat_mpv.a1 <- dat_mpv %>% mutate(!!treatment := a1) }
# vertex that right after Z according to tau
next.v <- tau.df$tau[tau.df$order=={tau.df$order[tau.df$tau==v]+1}]
next.mu <- if(next.v %in% L){ get(paste0("mu.",next.v,"_a1")) }else{ get(paste0("mu.",next.v,"_a0")) } # mu is evaluated at a0 for next.v in M and at a1 for next.v in L
next.mu.transform <- if(all(Y %in% c(0,1))){qlogis(next.mu)}else{next.mu} # if Y is binary, logit transform the sequential regression first
### End of preparation ####
if (crossfit==T){ #### cross fitting + super learner #####
v_fit <- CV.SuperLearner(Y=next.mu.transform, X=dat_mpv, family = gaussian(), V = K, SL.library = lib.seq, control = list(saveFitLibrary=T), saveAll = T)
v_fit <- .force_weight(v_fit, model="cv", lib=lib.seq) # force weight to be 1 for the one algorithm
######## prediction: A in mp(v) vs A NOT in mp(v) ########
if (treatment %in% mpv){
reg_a1 <- unlist(lapply(1:K, function(x) predict(v_fit$AllSL[[x]], newdata=dat_mpv.a1[v_fit$folds[[x]],])[[1]] %>% as.vector()))[order(unlist(lapply(1:K, function(x) v_fit$folds[[x]])))]
reg_a0 <- unlist(lapply(1:K, function(x) predict(v_fit$AllSL[[x]], newdata=dat_mpv.a0[v_fit$folds[[x]],])[[1]] %>% as.vector()))[order(unlist(lapply(1:K, function(x) v_fit$folds[[x]])))]
# assign prediction as mu.v_a1 and mu.v_a0
assign(paste0("mu.",v,"_a1"), if(all(Y %in% c(0,1))){plogis(reg_a1)}else{reg_a1}) # transform back to probability scale if Y is binary
assign(paste0("mu.",v,"_a0"), if(all(Y %in% c(0,1))){plogis(reg_a0)}else{reg_a0}) # transform back to probability scale if Y is binary
}else{
# assign prediction as mu.v_a1 and mu.v_a0, where mu.v_a1 = mu.v_a0 = mu.v
assign(paste0("mu.",v,"_a1"), if(all(Y %in% c(0,1))){plogis(v_fit$SL.predict)}else{v_fit$SL.predict}) # transform back to probability scale if Y is binary
assign(paste0("mu.",v,"_a0"), if(all(Y %in% c(0,1))){plogis(v_fit$SL.predict)}else{v_fit$SL.predict}) # transform back to probability scale if Y is binary
}
#########################################################
} else if (superlearner.seq==T){ #### super learner #####
v_fit <- SuperLearner(Y=next.mu.transform, X=dat_mpv, family = gaussian(), SL.library = lib.seq)
v_fit <- .force_weight(v_fit, model="sl", lib=lib.seq) # force weight to be 1 for the one algorithm
######## prediction: A in mp(v) vs A NOT in mp(v) ########
if (treatment %in% mpv){
reg_a1 <- predict(v_fit, newdata=dat_mpv.a1)[[1]] %>% as.vector()
reg_a0 <- predict(v_fit, newdata=dat_mpv.a0)[[1]] %>% as.vector()
# assign prediction as mu.v_a1 and mu.v_a0
assign(paste0("mu.",v,"_a1"), if(all(Y %in% c(0,1))){plogis(reg_a1)}else{reg_a1}) # transform back to probability scale if Y is binary
assign(paste0("mu.",v,"_a0"), if(all(Y %in% c(0,1))){plogis(reg_a0)}else{reg_a0}) # transform back to probability scale if Y is binary)
}else{
# assign prediction as mu.v_a1 and mu.v_a0, where mu.v_a1 = mu.v_a0 = mu.v
assign(paste0("mu.",v,"_a1"), if(all(Y %in% c(0,1))){plogis(predict(v_fit)[[1]] %>% as.vector())}else{predict(v_fit)[[1]] %>% as.vector()}) # transform back to probability scale if Y is binary
assign(paste0("mu.",v,"_a0"), if(all(Y %in% c(0,1))){plogis(predict(v_fit)[[1]] %>% as.vector())}else{predict(v_fit)[[1]] %>% as.vector()}) # transform back to probability scale if Y is binary
}
#########################################################
}else { #### linear regression #####
v_fit <- lm(next.mu.transform ~ ., data=dat_mpv) # fit linear regression/ logistic regression depending on type of v
######## prediction: A in mp(v) vs A NOT in mp(v)########
if (treatment %in% mpv){
reg_a1 <- predict(v_fit, newdata=dat_mpv.a1)
reg_a0 <- predict(v_fit, newdata=dat_mpv.a0)
# assign prediction as mu.v_a1 and mu.v_a0
assign(paste0("mu.",v,"_a1"), if(all(Y %in% c(0,1))){plogis(reg_a1)}else{reg_a1}) # transform back to probability scale if Y is binary
assign(paste0("mu.",v,"_a0"), if(all(Y %in% c(0,1))){plogis(reg_a0)}else{reg_a0}) # transform back to probability scale if Y is binary
}else{
# assign prediction as mu.v_a1 and mu.v_a0, where mu.v_a1 = mu.v_a0 = mu.v
assign(paste0("mu.",v,"_a1"), if(all(Y %in% c(0,1))){plogis(predict(v_fit))}else{predict(v_fit)}) # transform back to probability scale if Y is binary
assign(paste0("mu.",v,"_a0"), if(all(Y %in% c(0,1))){plogis(predict(v_fit))}else{predict(v_fit)}) # transform back to probability scale if Y is binary
}
##########################################################
}
}  ## End of iteration over all vertics between A and Y
# density ratio before Y
selected.M <- M[sapply(M, function(m) tau.df$order[tau.df$tau==m] < tau.df$order[tau.df$tau==outcome])] # M precedes Y
selected.L <- L[sapply(L, function(l) tau.df$order[tau.df$tau==l] < tau.df$order[tau.df$tau==outcome])] # L precedes Y
f.M_preY <- Reduce(`*`, densratio.M[,paste0("densratio_",selected.M), drop=F]) # Mi precede Y = the set M
f.L_preY <- Reduce(`*`, densratio.L[,paste0("densratio_",selected.L), drop=F]) # Li precede Y = the set L
EIF.Y <- if(outcome %in% L){
(A==a1)*f.M_preY*(Y-mu.Y_a1)}else{ # if Y in L
(A==a0)*1/f.L_preY*(Y-mu.Y_a0)} # if Y in M
for (v in rev(vertices.between.AY)){ ## iterate over all vertices between A and Y
# select M and L that precede v
selected.M <- M[sapply(M, function(m) tau.df$order[tau.df$tau==m] < tau.df$order[tau.df$tau==v])] # M precedes Z
selected.L <- L[sapply(L, function(l) tau.df$order[tau.df$tau==l] < tau.df$order[tau.df$tau==v])] # L precedes Z
# vertex that right after v according to tau
next.v <- tau.df$tau[tau.df$order=={tau.df$order[tau.df$tau==v]+1}]
# mu(next.v, a_{next.v})
next.mu <- if(next.v %in% L){ get(paste0("mu.",next.v,"_a1"))}else{get(paste0("mu.",next.v,"_a0"))}
EIF.v <- if(v %in% L){ # v in L
# product of the selected variables density ratio
f.M_prev <- Reduce(`*`, densratio.M[,paste0("densratio_",selected.M), drop=F]) # Mi precede v
# EIF for v|mp(v)
(A==a1)*f.M_prev*( next.mu - get(paste0("mu.",v,"_a1")) )
}else{ # v in M
# product of the selected variables density ratio
f.L_prev <- Reduce(`*`, densratio.L[,paste0("densratio_",selected.L), drop=F]) # Li precede v
# EIF for v|mp(v)
(A==a0)*1/f.L_prev*( next.mu - get(paste0("mu.",v,"_a0")) )
}
assign(paste0("EIF.",v), EIF.v)
} ## End of iteration over all vertices between A and Y
# vertex that right after A according to tau
next.A <- tau.df$tau[tau.df$order=={tau.df$order[tau.df$tau==treatment]+1}]
EIF.A <- {(A==a1) - p.a1.mpA}*get(paste0("mu.",next.A,"_a0"))
# estimated psi
estimated_psi = mean( EIF.Y + rowSums(as.data.frame(mget(paste0("EIF.",vertices.between.AY)))) +  EIF.A + p.a1.mpA*get(paste0("mu.",next.A,"_a0")) + (A==a0)*Y )
# EIF
EIF <- EIF.Y + # EIF of Y|mp(Y)
rowSums(as.data.frame(mget(paste0("EIF.",vertices.between.AY)))) + # EIF of v|mp(v) for v between A and Y
EIF.A + # EIF of A|mp(A)
p.a1.mpA*get(paste0("mu.",next.A,"_a0")) + # EIF of mp(A)
mean((A==a0)*Y) -
estimated_psi
# confidence interval
lower.ci <- estimated_psi-1.96*sqrt(mean(EIF^2)/nrow(data))
upper.ci <- estimated_psi+1.96*sqrt(mean(EIF^2)/nrow(data))
onestep.out <- list(estimated_psi=estimated_psi, # estimated parameter
lower.ci=lower.ci, # lower bound of 95% CI
upper.ci=upper.ci, # upper bound of 95% CI
EIF=EIF, # E(Dstar) for Y|M,A,X and M|A,X, and A|X
EIF.Y=EIF.Y, # EIF of Y|mp(Y)
EIF.A=EIF.A, # EIF of A|mp(A)
EIF.v = rowSums(as.data.frame(mget(paste0("EIF.",vertices.between.AY)))), # EIF of v|mp(v) for v between A and Y
p.a1.mpA = p.a1.mpA, # estimated E[A=a1|mp(A)]
mu.next.A = get(paste0("mu.",next.A,"_a0")) # estimated E[v|mp(v)] for v that comes right after A
)
estimated_psi
mean(EIF.Y)
mean(rowSums(as.data.frame(mget(paste0("EIF.",vertices.between.AY)))))
mean(f.L_preY)
mean(densratio_A)
mean(densratio.L)
graph <- make.graph(vertices=c('A','M','L','Y','X'),
bi_edges=list(c('A','L'), c('L','Y')),
di_edges=list(c('X','A'), c('X','M'), c('X','L'),c('X','Y'), c('A','M'), c('M','L'), c('L','Y'), c('M','Y')))
# get the topological ordering of the graph
top_order <- f.top_order(graph)
V1=A
V1='A'
Vi='A'
V2='Y'
Vj='Y'
f.reachable_closure(graph,c(Vi,Vj))[[2]]
#' @return A logical value indicating whether the graph is nonparametrically saturated.
#' @export
#' @importFrom utils combn
#' @examples
#' graph <- make.graph(vertices=c('A','M','L','Y','X'),
#' bi_edges=list(c('A','Y')),
#' di_edges=list(c('X','A'), c('X','M'), c('X','L'),
#' c('X','Y'), c('M','Y'), c('A','M'), c('A','L'), c('M','L'), c('L','Y')))
#' is.np.saturated(graph)
#'
is.np.saturated <- function(graph) {
# get the topological ordering of the graph
top_order <- f.top_order(graph)
# Iterate over all pairs of vertices
for (pair in combn(graph$vertices, 2, simplify = FALSE)) {
Vi <- pair[1]
Vj <- pair[2]
# order Vi and Vj
if (which(top_order == Vi) > which(top_order == Vj)) {
V1 <- Vj
V2 <- Vi
} else {
V1 <- Vi
V2 <- Vj
}
# Check if there is no dense inducing path between Vi and Vj
# 1. V1 is not in the parents set of Di for all Di in D, where D is the district of V2 in conditional acyclic directed mixed graphs (CADMG) obtained by recursively fixing as many vertices as possible in V/V2
# AND 2. The CADMG obtained by recursively fixing as many vertices as possible in V/{Vi, Vj} has more than one district.
# Note that, fixed variable doesn't count towards the number of districts.
# (cnt.districts(f.reachable_closure(graph,c(Vi,Vj))[[3]])$n.districts > 1)
# !(V1 %in% f.district(f.reachable_closure(graph,c(V1,V2))[[3]], V2))
if (!(V1 %in% f.parents(graph, f.district(f.reachable_closure(graph,V2)[[3]], V2))) &&  (cnt.districts(f.reachable_closure(graph,c(Vi,Vj))[[3]])$n.districts -length(f.reachable_closure(graph,c(Vi,Vj))[[2]]) > 1)){
message("The graph is not nonparametrically saturated.")
# print(c(V1,V2))
return(FALSE)
} # end of if statement
} # end of for loop
message("The graph is nonparametrically saturated.")
return(TRUE)
}
graph <- make.graph(vertices=c('A','M','L','Y','X'),
bi_edges=list(c('A','L'), c('L','Y')),
di_edges=list(c('X','A'), c('X','M'), c('X','L'),c('X','Y'), c('A','M'), c('M','L'), c('L','Y'), c('M','Y')))
is.np.saturated(graph)
is.mb.shielded(graph)
graph <- make.graph(vertices=c('A','M','L','Y','X'),
bi_edges=list(c('A','L'), c('L','Y')),
di_edges=list(c('X','A'), c('X','M'), c('X','L'),c('X','Y'), c('A','M'), c('M','L'), c('L','Y')))
is.np.saturated(graph)
graph <- make.graph(vertices=c('A','M','L','Y','X'),
bi_edges=list(c('A','L'), c('M','Y')),
di_edges=list(c('X','A'), c('X','M'), c('X','L'),c('X','Y'), c('A','Y'), c('A','M'), c('M','L'), c('L','Y')),
multivariate.variables = list(M=c('M.1','M.2')))
is.np.saturated(graph)
is.mb.shielded(graph)
library("devtools")
library("roxygen2")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(devtools)
devtools::check()
devtools::install()
library(flexCausal)
vignette('flexCausal')
vignette(flexCausal)
vignette(package = "flexCausal")
?ADMGtmle
devtools::install(build_vignettes = TRUE)
vignette(package='flexCausal')
devtools::install(build_vignettes = TRUE)
library(flexCausal)
vignette(package='flexCausal')
